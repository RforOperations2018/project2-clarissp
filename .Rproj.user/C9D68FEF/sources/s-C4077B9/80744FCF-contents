require(shiny)
require(rgdal)
require(leaflet)
require(leaflet.extras)
require(dplyr)
require(readxl)
require(stringr)
require(shinydashboard)
require(reshape2)
require(dplyr)
require(ggplot2)
require(plotly)
require(shinythemes)
require(RSocrata)
require(httr)

token <- jsonlite::fromJSON("token.json")$token

county <- read.socrata("https://data.pa.gov/resource/n96m-gp6j.json", app_token = token)
sw_county <- read.socrata("https://data.pa.gov/resource/n96m-gp6j.json?$county_nam=ALLEGHENY")
sw_county
  
subset(county, county_nam %in% ("ALLEGHENY", "ARMSTRONG","BEAVER","BUTLER","CAMBRIA","FAYETTE","GREENE","INDIANA","LAWERENCE","SOMERSET","WASHINGTION","WESTMORELAND"))




# Define UI for application that draws a histogram
ui <- fluidPage(
   
   # Application title
   titlePanel("Old Faithful Geyser Data"),
   
   # Sidebar with a slider input for number of bins 
   sidebarLayout(
      sidebarPanel(
         sliderInput("bins",
                     "Number of bins:",
                     min = 1,
                     max = 50,
                     value = 30)
      ),
      
      # Show a plot of the generated distribution
      mainPanel(
         plotOutput("distPlot")
      )
   )
)

# Define server logic required to draw a histogram
server <- function(input, output) {
   
   output$distPlot <- renderPlot({
      # generate bins based on input$bins from ui.R
      x    <- faithful[, 2] 
      bins <- seq(min(x), max(x), length.out = input$bins + 1)
      
      # draw the histogram with the specified number of bins
      hist(x, breaks = bins, col = 'darkgray', border = 'white')
   })
}

# Run the application 
shinyApp(ui = ui, server = server)

